" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" --- Plugs! ---
Plug 'ahdinosaur/vim-colemak'
Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-sensible'
Plug 'mhinz/vim-grepper'
Plug 'kien/ctrlp.vim'
" Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --clangd-completer --ts-completer --rust-completer' }
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --clangd-completer' }
Plug 'vim-syntastic/syntastic'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-fugitive'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'editorconfig/editorconfig-vim'
Plug 'leafgarland/typescript-vim'
Plug 'jason0x43/vim-js-indent'
Plug 'rust-lang/rust.vim'
Plug 'sirtaj/vim-openscad'
Plug 'w0rp/ale'
Plug 'jxnblk/vim-mdx-js'
" --- /Plugs! ---

call plug#end()

" Vim5 and later versions support syntax highlighting.
" This enables syntax highlighting by default.
syntax enable

" set colors
set t_Co=256
set background=dark
colorscheme candycode

" jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" load indentation rules and plugins
" according to the detected filetype.
filetype plugin indent on

let mapleader=","

set showcmd    " Show (partial) command in status line.
set showmatch    " Show matching brackets.
set ignorecase   " Do case insensitive matching
set smartcase    " Do smart case matching
set incsearch    " Incremental search
set autowrite    " Automatically save before commands like :next and :make
set hidden   " Hide buffers when they are abandoned
set mouse=a    " Enable mouse usage (all modes)
set encoding=utf-8  " Set encoding as UTF-8"

" set tab / spaces
set tabstop=8
set expandtab
set softtabstop=2
set shiftwidth=2
set clipboard=unnamedplus
set synmaxcol=128
set ttyscroll=10
set encoding=utf-8
set wrap
set number
set nowritebackup
set noswapfile
set nobackup
set hlsearch
set ignorecase
set smartcase

" No show command
autocmd VimEnter * set nosc

" format the entire file
nmap <leader>fef ggVG=

" reload current file
nmap <leader>r :e!<CR>

" quit current file
nmap <leader>q :q<CR>

" Yank text to the OS X clipboard
noremap <leader>y "*y
noremap <leader>yy "*Y

" Preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

" NERDTree
nmap <leader>n :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore = []
"let NERDTreeIgnore = ['node_modules']

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = { 'mode': 'passive' }
let g:syntastic_javascript_checkers = ['standard']

" CtrlP
"nnoremap <silent> t :CtrlP<cr>
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
"set wildignore+=node_modules
let g:ctrlp_working_path_mode = 2
"let g:ctrlp_by_filename = 1
let g:ctrlp_max_files = 20000
let g:ctrlp_max_depth = 20

"fugitive
set statusline+=%{fugitive#statusline()}

" rust
let g:rustfmt_autosave = 1

" eslint
let g:ale_javascript_eslint_suppress_missing_config = 1
let g:ale_linters = {
\  'javascript': ['eslint', 'standard']
\}
let g:ale_fixers = {
\  'javascript': ['prettier', 'eslint', 'prettier_standard', 'standard']
\}
let g:ale_fix_on_save = 1
